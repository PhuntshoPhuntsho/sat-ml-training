{
  
    
        "post0": {
            "title": "Machine learning (ML)",
            "content": "References: . Introduction to Statistical Learning https://faculty.marshall.usc.edu/gareth-james/ISL/ Example from book in Python Notebooks https://github.com/tdpetrou/Machine-Learning-Books-With-Python/tree/master/Introduction%20to%20Statistical%20Learning | Additional Examples from Python for Data Science https://jakevdp.github.io/PythonDataScienceHandbook/index.html #5.-Machine-Learning | . 1.2.1 Classic ML . RandomForest . Decision tree and RandomForest classifier in-depth or w/ sciki-learn | RandomForest classifier in LULC case (DS example) . Best practice of train, validation and test split; . | Dealing with class imbalance . | Optimize estimators and leaves setting . | Model parallel training and prediction . | Model evaluation; . | . | . LightGBM . LightGBM . Gradient boost; | . | LightGBM in crop type mapping case (DS example and SentinelHub eo-learn example) . Best practice of train, validation and test split; . | Dealing with class imbalance . | Hyperparameter tuning . | Model parallel training and prediction with CPU and GPU . | Model evaluation; . | . | . 1.2.2 Deep learning . TF dynamic UNet . Image classification, object detection | Semantic Segment and dynamic UNet | Dynamic UNet in LULC case (DS example) | . TensorFlow FCN . Tensorflow | Tensorflow FCN | Tensorflow FCN in LULC | .",
            "url": "https://developmentseed.github.io/sat-ml-training/python/background/2020/02/23/IntroMachineLearning.html",
            "relUrl": "/python/background/2020/02/23/IntroMachineLearning.html",
            "date": " • Feb 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Geospatial Python",
            "content": "The following material covers the basics of using spatial data in python. The main goal is to become familiar with the libraries used, and to try a few examples of operations with vector, and raster data, including some basic visualizations. . The Main lessons come from AutoGIS . Vector Data . How to load and save spatial data with . [Geopandas](https://automating-gis-processes.github.io/site/notebooks/L2/geopandas-basics.html#Input-data:-Finnish-topographic-database) . | Data Manipulation . ([Geopandas](https://automating-gis-processes.github.io/site/notebooks/L2/geopandas-basics.html)) . **Projections | Geopandas/Shapely . | Intersects . | Bounding Box (BBOX) bounds . | Centroids centroid . | Filtering Data . Subsetting, to select records based on attributes use . the techniques from Pandas . | [Spatial . Join](https://automating-gis-processes.github.io/site/notebooks/L3/spatial-join.html) . | [Spatial . Aggregation](https://automating-gis-processes.github.io/site/notebooks/L4/geometric-operations.html#Aggregating-data) . | . | . | . Making Maps . Static, more examples | Dynamic | . Optional Bonus Material . Vector Input/Output(I/O) with Fiona | Using Spatial Indexes for faster analysis | . Raster . How to load and save data . Rasterio (Reading) | Rasterio (Writing) | . | Numpy Arrays (Rasters) . Clipping raster by AOI | Band Math (aka Map Algebra) | Sampling data from raster with a vector | . | . Making Maps . Static | Dynamic with Vector Data | . Additional References . Geopandas for vector geometry and attribute handling . | Shapely for vector geometry operations that Geopandas doesn’t do . | .",
            "url": "https://developmentseed.github.io/sat-ml-training/python/background/2020/02/22/GeospatialPython.html",
            "relUrl": "/python/background/2020/02/22/GeospatialPython.html",
            "date": " • Feb 22, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Intro to Python",
            "content": "General python . An introduction or refresher for Python 3 Online Videos from Udemy AND/OR | Interactive lessons with examples and quizzes from CodeAcademy (Recommend all lessons except #10 on Classes) | . OR . https://github.com/jakevdp/WhirlwindTourOfPython | . Goals . Data types . Basic Types: Integers (Whole numbers), Floats (Numbers with decimals), Strings | Constructed Types: Lists, Dictionaries . Note: Dictionaries and the JSON file format are very similar in how they structure data. . | . | . | Looping (Program flow control) . Using looping to iterate over a set of items to repeat a process . Example: Loop over a list of items . | Example: Loop over list of files . | . | . | Calling functions . Importing libraries (aka modules, packages) | How to call a function | How to write a small function | . | . Additional References . Python Documentation https://docs.python.org/3/tutorial/index.html . | More tutorials https://docs.python-guide.org/intro/learning/ . | . Python for Data Science . Primary Source https://jakevdp.github.io/PythonDataScienceHandbook/index.html | Secondary Source https://datacarpentry.org/python-ecology-lesson/ | . Numpy . . Important: Understanding multidimensional data arrays as a data structure . Note: Numpy array data must all be of the same type (e.g. Integer, Float, etc…) . Lessons: . Introduction to NumPy . | Understanding Data Types in Python . | The Basics of NumPy Arrays . | Computation on NumPy Arrays: Universal Functions . | Aggregations: Min, Max, and Everything In Between . | . Pandas . . Important: Understanding data frames as a table (sheet), with data records as rows, and data attributes as columns. Each column can be a different data type . Lessons: . Introduction . | Importing and exporting CSV and JSON data sources . | Summarizing (aggregating) data . | Selecting relevant data records . | (Optional) More details . | . Plotting . . Important: Being able to visualize selections of data in a variety of standard plot types. Histogram, Bar, Line, Scatter Plot (XY) . Visualization with Matplotlib . | Simple Line Plots . | Scatter Plots . | Density and Contour Plots . | Histograms, Binnings, and Density . | .",
            "url": "https://developmentseed.github.io/sat-ml-training/python/background/2020/02/21/IntroPython.html",
            "relUrl": "/python/background/2020/02/21/IntroPython.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: main- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) &lt;ipython-input-2-88b922e30289&gt; in &lt;module&gt; 1 #collapse-hide 2 import pandas as pd -&gt; 3 import altair as alt ModuleNotFoundError: No module named &#39;altair&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://developmentseed.github.io/sat-ml-training/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Material on this website is available under __ license. It was originally developed by Development Seed for the SERVIR program (NASA &amp; USAID). . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://developmentseed.github.io/sat-ml-training/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://developmentseed.github.io/sat-ml-training/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}